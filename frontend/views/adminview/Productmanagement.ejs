<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management - BuildYourPC</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0f172a;
        }

        .modal-scroll::-webkit-scrollbar {
            width: 8px;
        }

        .modal-scroll::-webkit-scrollbar-track {
            background: #1e293b;
            border-radius: 4px;
        }

        .modal-scroll::-webkit-scrollbar-thumb {
            background: #475569;
            border-radius: 4px;
        }

        .modal-scroll::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
    </style>
</head>

<body>
    <div class="min-h-screen p-8">
        <!-- Category Selection -->
        <div class="mb-6">
            <select id="categorySelect" onchange="filterProducts()" class="bg-slate-700 text-white px-4 py-2 rounded">
                <option value="all">All Categories</option>
                <option value="CPU">CPU</option>
                <option value="GPU">GPU</option>
                <option value="RAM">RAM</option>
                <option value="motherboard">Motherboard</option>
                <option value="storage">Storage</option>
                <option value="PSU">Power Supply</option>
                <option value="Cabinet">Case</option>
            </select>
        </div>

        <!-- Product List -->
        <div class="bg-slate-800 rounded-lg p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Product Management</h2>
                <button onclick="showAddProductForm()"
                    class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                    Add New Product
                </button>
            </div>

            <!-- Product Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full text-white">
                    <thead>
                        <tr class="border-b border-slate-700">
                            <th class="px-4 py-2 text-left">Product Name</th>
                            <th class="px-4 py-2 text-left">Category</th>
                            <th class="px-4 py-2 text-left">Price</th>
                            <th class="px-4 py-2 text-left">Stock</th>
                            <th class="px-4 py-2 text-left">Status</th>
                            <th class="px-4 py-2 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Products will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Product Form Modal -->
        <div id="productFormModal"
            class="hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4" 
            style="display: none;">
            <div class="bg-slate-800 rounded-lg w-full max-w-2xl max-h-[90vh] flex flex-col">
                <!-- Modal Header -->
                <div class="p-6 border-b border-slate-700">
                    <div class="flex justify-between items-center">
                        <h3 id="formTitle" class="text-xl font-bold text-white">Add/Edit Product</h3>
                        <button onclick="hideProductForm()"
                            class="text-slate-400 hover:text-white text-2xl">&times;</button>
                    </div>
                </div>

                <!-- Modal Body -->
                <div class="flex-1 overflow-y-auto modal-scroll p-6">
                    <form id="productForm" class="space-y-4" onsubmit="">
                        <div>
                            <label class="block text-sm font-medium text-blue-200 mb-2">Category</label>
                            <select id="productCategory" onchange="updateFormFields()"
                                class="w-full px-4 py-2 bg-slate-700 text-white rounded">
                                <option value="CPU">CPU</option>
                                <option value="motherboard">Motherboard</option>
                                <option value="RAM">RAM</option>
                                <option value="storage">Storage</option>
                                <option value="GPU">GPU</option>
                                <option value="PSU">Power Supply</option>
                                <option value="CPUCooler">CPU Cooler</option>
                                <option value="Cabinet">Cabinet</option>
                            </select>
                        </div>

                        <div id="dynamicFields" class="space-y-4">
                            <!-- Dynamic fields will be inserted here -->
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-blue-200 mb-2">Price ($)</label>
                            <input type="number" name="price" step="0.01"
                                class="w-full px-4 py-2 bg-slate-700 text-white rounded" required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-blue-200 mb-2">Stock</label>
                            <input type="number" name="stock" class="w-full px-4 py-2 bg-slate-700 text-white rounded"
                                required>
                        </div>
                    </form>
                </div>

                <!-- Modal Footer -->
                <div class="p-6 border-t border-slate-700">
                    <button type="submit" form="productForm"
                        class="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        Save Product
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Category fields configuration
        const categoryFields = {
            CPU: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'frequency', label: 'Frequency (GHz)', type: 'number' },
                { name: 'cores', label: 'Cores', type: 'number' },
                { name: 'generation', label: 'Generation', type: 'number' },
                { name: 'socket', label: 'Socket', type: 'text' },
                { name: 'chipset', label: 'Chipset', type: 'text' },
                { name: 'basespeed', label: 'Base Speed', type: 'number' },
                { name: 'boostspeed', label: 'Boost Speed', type: 'number' },
                { name: 'tdp', label: 'TDP', type: 'number' },
                { name: 'image', label: 'Product Image', type: 'file' },


            ],
            motherboard: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'socket', label: 'Socket', type: 'text' },
                { name: 'chipset', label: 'Chipset', type: 'text' },
                { name: 'formFactor', label: 'Form Factor', type: 'text' },
                { name: 'maxMemory', label: 'Max Memory', type: 'number' },
                { name: 'tdp', label: 'TDP', type: 'number' },
                { name: 'supportedProcessor', label: 'Supported Processor', type: 'array' },
                { name: 'ramSlots', label: 'RAM Slots', type: 'number' },
                { name: 'ramType', label: 'RAM Type', type: 'text' },
                { name: 'nvmeSupport', label: 'NVMe Support', type: 'boolean' },
                { name: 'pcieVersion', label: 'PCIe Version', type: 'text' },
                { name: 'image', label: 'Product Image', type: 'file' }
            ],

            RAM: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'ramType', label: 'RAM Type', type: 'text' },
                { name: 'ramCapacity', label: 'RAM Capacity', type: 'text' },
                { name: 'speed', label: 'Speed (MHz)', type: 'number' },
                { name: 'voltage', label: 'Voltage', type: 'number' },
                { name: 'image', label: 'Product Image', type: 'file' },
            ],

            storage: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'capacity', label: 'Capacity (GB)', type: 'number' },
                { name: 'type', label: 'Type', type: 'text' },
                { name: 'nvmeSupport', label: 'NVMe Support', type: 'boolean' },
                { name: 'readSpeed', label: 'Read Speed (MB/s)', type: 'number' },
                { name: 'writeSpeed', label: 'Write Speed (MB/s)', type: 'number' },
                { name: 'voltage', label: 'Voltage', type: 'number' },
                { name: 'image', label: 'Product Image', type: 'file' },

            ],

            GPU: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'chipset', label: 'Chipset', type: 'text' },
                { name: 'memory', label: 'Memory (GB)', type: 'number' },
                { name: 'memoryType', label: 'Memory Type', type: 'text' },
                { name: 'clockSpeed', label: 'Clock Speed (MHz)', type: 'number' },
                { name: 'pcieVersion', label: 'PCIe Version', type: 'text' },
                { name: 'tdp', label: 'TDP (W)', type: 'number' },
                { name: 'length', label: 'Length (mm)', type: 'number' },
                { name: 'image', label: 'Product Image', type: 'file' },

            ],

            PSU: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'wattage', label: 'Wattage (W)', type: 'number' },
                { name: 'efficiency', label: 'Efficiency Rating', type: 'text' },
                { name: 'formFactor', label: 'Form Factor', type: 'text' },
                { name: 'image', label: 'Product Image', type: 'file' },

            ],

            CPUCooler: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'socket', label: 'Socket', type: 'text' },
                { name: 'tdp', label: 'TDP (W)', type: 'number' },
                { name: 'cpuType', label: 'CPU Type', type: 'array' },
                { name: 'coolingType', label: 'Cooling Type', type: 'text' },
                { name: 'rpm', label: 'RPM', type: 'number' },
                { name: 'liquid', label: 'Liquid Cooling', type: 'boolean' },
                { name: 'image', label: 'Product Image', type: 'file' },

            ],
            Cabinet: [
                { name: 'brand', label: 'Brand', type: 'text' },
                { name: 'model', label: 'Model', type: 'text' },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text' },
                { name: 'size', label: 'Size', type: 'text' },
                { name: 'color', label: 'Color Options', type: 'array' },
                { name: 'sidePanel', label: 'Side Panel Type', type: 'text' },
                { name: 'motherboardFormFactor', label: 'Motherboard Form Factor', type: 'array' },
                { name: 'dimensions', label: 'Dimensions (mm)', type: 'object' },
                { name: 'volume', label: 'Volume (L)', type: 'number' },
                { name: 'usbSlots', label: 'USB Slots', type: 'object' },
                { name: 'image', label: 'Product Image', type: 'file' },

            ],


        };

        // Function to update form fields based on category
        function updateFormFields() {
            const category = document.getElementById('productCategory').value;
            const dynamicFields = document.getElementById('dynamicFields');
            dynamicFields.innerHTML = '';

            const fields = categoryFields[category] || [];
            fields.forEach(field => {
                let fieldHtml;
                if (field.type === 'file') {
                    fieldHtml = `
                        <div>
                            <label class="block text-sm font-medium text-blue-200 mb-2">${field.label}</label>
                            <input type="${field.type}" name="${field.name}" accept="image/*"
                                class="w-full px-4 py-2 bg-slate-700 text-white rounded file:mr-4 file:py-2 file:px-4
                                file:rounded-full file:border-0 file:text-sm file:font-semibold
                                file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                        </div>
                    `;
                } else {
                    fieldHtml = `
                        <div>
                            <label class="block text-sm font-medium text-blue-200 mb-2">${field.label}</label>
                            <input type="${field.type}" name="${field.name}" 
                                class="w-full px-4 py-2 bg-slate-700 text-white rounded">
                        </div>
                    `;
                }
                dynamicFields.insertAdjacentHTML('beforeend', fieldHtml);
            });
        }



        // Function to filter products
        function filterProducts() {
            const category = document.getElementById('categorySelect').value;
            const rows = document.querySelectorAll('#productTableBody tr');

            rows.forEach(row => {
                if (category === 'all' || row.dataset.category === category) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Function to show add product form
        function showAddProductForm() {
            const modal = document.getElementById('productFormModal');
            console.log('Showing modal, current classes:', modal.classList);
            modal.style.display = 'flex';
            modal.classList.remove('hidden');
            document.getElementById('formTitle').textContent = 'Add New Product';
            document.getElementById('productForm').reset();
            updateFormFields();
        }

        // Function to hide product form
        function hideProductForm() {
            const modal = document.getElementById('productFormModal');
            modal.style.display = 'none';
            modal.classList.add('hidden');
        }


        // Add event listener to form
        document.getElementById('productForm').addEventListener('submit', handleSubmit);

        // Function to toggle product status
        function toggleProductStatus(productId) {
            const product = products.find(p => p.id === productId);
            if (product) {
                product.active = !product.active;
                loadProducts();
            }
        }

        // Function to edit product
        function editProduct(productId) {
            const product = products.find(p => p.id === productId);
            if (product) {
                document.getElementById('formTitle').textContent = 'Edit Product';
                document.getElementById('productCategory').value = product.category;
                updateFormFields();

                // Fill form with product data
                Object.keys(product).forEach(key => {
                    const input = document.querySelector(`[name = "${key}"]`);
                    if (input) input.value = product[key];
                });

                showAddProductForm();
            }
        }

        // Function to fetch products from database
        async function fetchProductsFromDatabase() {
            try {
                const response = await fetch('/api/products');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const products = await response.json();
                return products;
            } catch (error) {
                console.error('Error fetching products:', error);
                return [];
            }


            
        }

        // Function to load products from database
        async function loadProducts() {
            try {
                const fetchedProducts = await fetchProductsFromDatabase();
                products = fetchedProducts; // Update global products array
                displayProducts(); // Update the UI with fetched products
            } catch (error) {
                console.error('Error loading products:', error);
                alert('Failed to load products. Please try again.');
            }
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', () => {
            loadProducts();
            updateFormFields();
        });

        async function handleSubmit(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            const category = document.getElementById('productCategory').value;
            
            // Get the file input
            const imageFile = formData.get('image');
            
            // Create a temporary URL for the image
            const productImage = imageFile ? URL.createObjectURL(imageFile) : '';
            
            // Create an object from form data and convert number fields
            const productData = {};
            formData.forEach((value, key) => {
                if (key === 'image') {
                    // Skip the file input as we're handling it separately
                    return;
                }
                // Convert number fields to numbers
                if (['cores', 'frequency', 'basespeed', 'boostspeed', 'tdp', 'price'].includes(key)) {
                    productData[key] = Number(value);
                } else {
                    productData[key] = value;
                }
            });

            // Add the image URL to the product data
            productData.productImage = productImage || 'default-image-url.jpg';

            console.log('Submitting product data:', productData); // Debug log

            try {
                const response = await fetch(`/api/${category.toLowerCase()}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(productData)
                });

                const result = await response.json();
                console.log('Server response:', result); // Debug log
                
                if (result.success) {
                    alert('Product added successfully!');
                    hideProductForm();
                    loadProducts();
                } else {
                    alert(result.message || 'Failed to add product');
                }
            } catch (error) {
                console.error('Error submitting product:', error);
                alert('Failed to submit product. Please try again.');
            }
        }
    </script>
</body>

</html>