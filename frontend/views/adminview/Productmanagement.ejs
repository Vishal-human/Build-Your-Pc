<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management - BuildYourPC</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0f172a;
        }
    </style>
</head>

<body>
    <div class="min-h-screen p-8">
        <!-- Category Selection -->
        <div class="mb-6">
            <select id="categorySelect" onchange="filterProducts()" class="bg-slate-700 text-white px-4 py-2 rounded">
                <option value="all">All Categories</option>
                <option value="cpu">CPU</option>
                <option value="gpu">GPU</option>
                <option value="ram">RAM</option>
                <option value="motherboard">Motherboard</option>
                <option value="storage">Storage</option>
                <option value="psu">Power Supply</option>
                <option value="case">Case</option>
            </select>
        </div>

        <div class="bg-slate-800 rounded-lg p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Product Management</h2>
                <button onclick="showAddProductForm()"
                    class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                    Add New Product
                </button>
            </div>

            <!-- Product List Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full text-white">
                    <thead>
                        <tr class="border-b border-slate-700">
                            <th class="px-4 py-2 text-left">Product Name</th>
                            <th class="px-4 py-2 text-left">Category</th>
                            <th class="px-4 py-2 text-left">Price</th>
                            <th class="px-4 py-2 text-left">Stock</th>
                            <th class="px-4 py-2 text-left">Status</th>
                            <th class="px-4 py-2 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Products will be dynamically loaded here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Dynamic Product Form Modal -->
        <div id="productFormModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-slate-800 p-6 rounded-lg w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 id="formTitle" class="text-xl font-bold text-white">Add/Edit Product</h3>
                    <button onclick="hideProductForm()" class="text-slate-400 hover:text-white">&times;</button>
                </div>
                <form id="productForm" class="space-y-4" onsubmit="handleSubmit(event)">
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Category</label>
                        <select id="productCategory" onchange="updateFormFields()"
                            class="w-full px-4 py-2 bg-slate-700 text-white rounded">
                            <option value="cpu">CPU</option>
                            <option value="gpu">GPU</option>
                            <option value="ram">RAM</option>
                            <option value="motherboard">Motherboard</option>
                            <option value="storage">Storage</option>
                            <option value="psu">Power Supply</option>
                            <option value="case">Case</option>
                        </select>
                    </div>

                    <div id="dynamicFields">
                        <!-- Dynamic fields will be inserted here based on category -->
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Price ($)</label>
                        <input type="number" name="price" step="0.01"
                            class="w-full px-4 py-2 bg-slate-700 text-white rounded" required>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Stock</label>
                        <input type="number" name="stock" class="w-full px-4 py-2 bg-slate-700 text-white rounded"
                            required>
                    </div>

                    <button type="submit" name="submit"
                        class="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        Save Product
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        const categoryFields = {
            cpu: [
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'manufacturer', label: 'Manufacturer', type: 'select', options: ['AMD', 'Intel'], required: true },
                { name: 'socket', label: 'Socket', type: 'select', options: ['AM5', 'AM4', 'AM3', 'LGA', 'PGA'], required: true },
                { name: 'cores', label: 'Cores', type: 'number', required: true },
                { name: 'generation', label: 'Generation', type: 'select', options: ['7', '8', '9', '10', '11', '12', '13', '14', '15', '16'], required: true },
                { name: 'frequency', label: 'Frequency (GHz)', type: 'number', required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ],

            motherboard: [
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'manufacturer', label: 'Manufacturer', type: 'text', required: true },
                { name: 'socket', label: 'Socket', type: 'select', options: ['AM5', 'AM4', 'AM3', 'LGA', 'PGA'], required: true },
                { name: 'chipset', label: 'Chipset', type: 'text', required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ],

            gpu: [
                { name: 'brand', label: 'Brand', type: 'text', required: true },
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'vram', label: 'VRAM (GB)', type: 'number', required: true },
                { name: 'clockSpeed', label: 'Clock Speed (MHz)', type: 'number', required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ],
            ram: [
                { name: 'brand', label: 'Brand', type: 'text', required: true },
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'speed', label: 'Speed (MHz)', type: 'number', required: true },
                { name: 'capacity', label: 'Capacity (GB)', type: 'number', required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ],

            case: [
                { name: 'brand', label: 'Brand', type: 'text', required: true },
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'size', label: 'Size', type: 'text', required: true },
                { name: 'color', label: 'Color', type: 'text', required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ],
            storage: [
                { name: 'brand', label: 'Brand', type: 'text', required: true },
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'capacity', label: 'Capacity (GB)', type: 'number', required: true },
                { name: 'type', label: 'Type', type: 'select', options: ['SSD', 'HDD', 'NVMe'], required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ],
            psu: [
                { name: 'brand', label: 'Brand', type: 'text', required: true },
                { name: 'model', label: 'Model', type: 'text', required: true },
                { name: 'wattage', label: 'Wattage (W)', type: 'number', required: true },
                { name: 'efficiency', label: 'Efficiency', type: 'select', options: ['80+ Bronze', '80+ Silver', '80+ Gold', '80+ Platinum'], required: true },
                { name: 'image', label: 'Product Image', type: 'file', required: true }
            ]
        };

        function updateFormFields() {
            const category = document.getElementById('productCategory').value;
            const dynamicFields = document.getElementById('dynamicFields');
            dynamicFields.innerHTML = '';

            const fields = categoryFields[category] || [];
            fields.forEach(field => {
                let fieldHtml = `
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">${field.label}</label>`;

                if (field.type === 'select') {
                    fieldHtml += `
                        <select name="${field.name}" class="w-full px-4 py-2 bg-slate-700 text-white rounded" ${field.required ? 'required' : ''}>
                            ${field.options.map(option => `<option value="${option}">${option}</option>`).join('')}
                        </select>`;
                } else {
                    fieldHtml += `
                        <input type="${field.type}" name="${field.name}" class="w-full px-4 py-2 bg-slate-700 text-white rounded" ${field.required ? 'required' : ''}>`;
                }

                fieldHtml += `</div>`;
                dynamicFields.insertAdjacentHTML('beforeend', fieldHtml);
            });
        }

        function showAddProductForm() {
            document.getElementById('productFormModal').classList.remove('hidden');
            document.getElementById('formTitle').textContent = 'Add New Product';
            document.getElementById('productForm').reset();
            updateFormFields();
        }

        function hideProductForm() {
            document.getElementById('productFormModal').classList.add('hidden');
        }

        function filterProducts() {
            const category = document.getElementById('categorySelect').value;
            const products = document.querySelectorAll('#productTableBody tr');

            products.forEach(product => {
                if (category === 'all' || product.dataset.category === category) {
                    product.style.display = '';
                } else {
                    product.style.display = 'none';
                }
            });
        }

        function handleSubmit(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            // Send formData to server using fetch
            fetch('/api/products', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    hideProductForm();
                    loadProducts(); // Refresh product list
                })
                .catch(error => console.error('Error:', error));
        }

        function toggleProductStatus(productId) {
            fetch(`/api/products/${productId}/toggle-status`, {
                method: 'PUT'
            })
                .then(response => response.json())
                .then(data => {
                    loadProducts(); // Refresh product list
                })
                .catch(error => console.error('Error:', error));
        }

        function editProduct(productId) {
            fetch(`/api/products/${productId}`)
                .then(response => response.json())
                .then(product => {
                    document.getElementById('formTitle').textContent = 'Edit Product';
                    document.getElementById('productCategory').value = product.category;
                    updateFormFields();
                    // Fill form with product data
                    Object.keys(product).forEach(key => {
                        const input = document.querySelector(`[name="${key}"]`);
                        if (input) input.value = product[key];
                    });
                    showAddProductForm();
                });
        }

        function loadProducts() {
            fetch('/api/products')
                .then(response => response.json())
                .then(products => {
                    const tbody = document.getElementById('productTableBody');
                    tbody.innerHTML = '';
                    products.forEach(product => {
                        const row = `
                        <tr data-category="${product.category}" class="border-b border-slate-700">
                            <td class="px-4 py-2">${product.model || product.brand}</td>
                            <td class="px-4 py-2">${product.category}</td>
                            <td class="px-4 py-2">$${product.price}</td>
                            <td class="px-4 py-2">${product.stock}</td>
                            <td class="px-4 py-2">
                                <span class="px-2 py-1 rounded ${product.active ? 'bg-green-600' : 'bg-red-600'}">
                                    ${product.active ? 'Active' : 'Inactive'}
                                </span>
                            </td>
                            <td class="px-4 py-2">
                                <button onclick="editProduct('${product._id}')" class="bg-blue-600 text-white px-2 py-1 rounded mr-2">
                                    Edit
                                </button>
                                <button onclick="toggleProductStatus('${product._id}')" 
                                    class="px-2 py-1 rounded ${product.active ? 'bg-red-600' : 'bg-green-600'}">
                                    ${product.active ? 'Deactivate' : 'Activate'}
                                </button>
                            </td>
                        </tr>
                    `;
                        tbody.insertAdjacentHTML('beforeend', row);
                    });
                });
        }

        // Initialize form fields and load products on page load
        document.addEventListener('DOMContentLoaded', () => {
            updateFormFields();
            loadProducts();
        });
    </script>
</body>

</html>