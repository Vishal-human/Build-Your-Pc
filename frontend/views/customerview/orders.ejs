<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Orders</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-900 text-white">
    <%- include('../partials/navbar.ejs') %>

        <div class="container mx-auto p-6">
            <h2 class="text-3xl font-bold text-center text-blue-400 mb-8">Your Orders</h2>

            <!-- Orders List -->
            <div id="orders-list" class="grid grid-cols-1 lg:grid-cols-2 gap-6"></div>

            <!-- Empty Orders Message -->
            <p id="no-orders" class="text-center text-gray-400 hidden">No orders found.</p>
        </div>

        <%- include('../partials/footer.ejs') %>

            <script>
                document.addEventListener("DOMContentLoaded", async () => {
                    const ordersList = document.getElementById("orders-list");
                    const noOrdersMessage = document.getElementById("no-orders");

                    try {
                        const response = await fetch("api/orders");
                        if (!response.ok) throw new Error("Failed to fetch orders");

                        const orders = await response.json();

                        if (orders.length === 0) {
                            noOrdersMessage.classList.remove("hidden");
                            return;
                        }

                        orders.forEach(order => {
                            const orderElement = document.createElement("div");
                            orderElement.className = "bg-gray-800 p-6 rounded-lg shadow-lg border border-blue-500/30";

                            const productsList = order.products.map(p => `
                                <div class="flex justify-between py-2 border-b border-gray-700">
                                    <p class="text-blue-300">Product ID: ${p.id}</p>
                                    <p class="text-gray-400">₹${p.price}</p>
                                </div>
                            `).join("");

                            const address = order.address;

                            // Determine status class and text
                            let statusClass = "";
                            if (order.status === 'Canceled') {
                                statusClass = 'bg-red-500/20 text-red-400';
                            } else if (order.status === 'Pending') {
                                statusClass = 'bg-yellow-500/20 text-yellow-400';
                            } else {
                                statusClass = 'bg-green-500/20 text-green-400';
                            }

                            // Determine if we should show the cancel button (only for non-canceled orders)
                            const cancelButton = order.status !== 'Canceled' ?
                                `<button onclick="cancelOrder('${order._id}')" class="mt-3 px-4 py-2 bg-red-600 hover:bg-red-700 rounded text-white">Cancel Order</button>` : '';

                            orderElement.innerHTML = `
                                <div class="flex justify-between items-start mb-4">
                                    <h3 class="text-lg font-bold text-blue-400">Order #${order._id.slice(-6)}</h3>
                                    <span class="px-3 py-1 rounded-full ${statusClass}">${order.status}</span>
                                </div>

                                <div class="mb-4 p-4 bg-gray-900/50 rounded-lg">
                                    <h4 class="text-sm font-semibold text-blue-300 mb-2">Shipping Address</h4>
                                    <p class="text-sm text-gray-300">${address.fullName}</p>
                                    <p class="text-sm text-gray-300">${address.streetAddress}</p>
                                    <p class="text-sm text-gray-300">${address.city}, ${address.state} ${address.zipCode}</p>
                                    <p class="text-sm text-gray-300">Phone: ${address.phoneNumber}</p>
                                    <p class="text-sm text-gray-300">Email: ${address.email}</p>
                                </div>

                                <div class="space-y-2">
                                    ${productsList}
                                </div>

                                <div class="mt-4 pt-3 border-t border-gray-700">
                                    <div class="flex justify-between text-sm text-gray-400">
                                        <span>Subtotal:</span>
                                        <span>₹${order.totalAmount - 500}</span>
                                    </div>
                                    <div class="flex justify-between text-sm text-gray-400">
                                        <span>Delivery Fee:</span>
                                        <span>₹500</span>
                                    </div>
                                    <div class="flex justify-between text-lg font-bold mt-2 text-white">
                                        <span>Total:</span>
                                        <span>₹${order.totalAmount}</span>
                                    </div>
                                    <p class="text-xs text-gray-400 mt-2">Ordered on: ${new Date(order.createdAt).toLocaleDateString()}</p>
                                    ${cancelButton}
                                </div>
                            `;

                            ordersList.appendChild(orderElement);
                        });
                    } catch (error) {
                        console.error("Error fetching orders:", error);
                        noOrdersMessage.textContent = "Error loading orders. Please try again later.";
                        noOrdersMessage.classList.remove("hidden");
                    }
                });

                // Function to cancel an order
                async function cancelOrder(orderId) {
                    if (!confirm("Are you sure you want to cancel this order?")) {
                        return;
                    }

                    try {
                        const response = await fetch(`/orders/${orderId}/cancel`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        const data = await response.json();

                        if (data.success) {
                            alert("Order canceled successfully!");
                            // Reload the page to show updated status
                            window.location.reload();
                        } else {
                            alert(data.message || "Failed to cancel order.");
                        }
                    } catch (error) {
                        console.error("Error canceling order:", error);
                        alert("An error occurred while canceling your order. Please try again.");
                    }
                }
            </script>
</body>

</html>